'use strict';

// Declare app level module which depends on views, and components
var tearDrop = angular.module('TearDrop', [
  'ngCookies',
  'ngRoute',
  'nvd3ChartDirectives',
  'highcharts-ng',
  'angular-growl',
  'tearDropServices',
  'tearDropDirectives',
  'TearDrop.transcripts',
  'TearDrop.deresults'
]).
config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/', {
    templateUrl: '[% config.base_uri %]/app/home.html',
    controller: 'RootCtrl'
  })
  .otherwise({redirectTo: '/'});
}])
.controller('RootCtrl', ['$rootScope', '$scope', '$http', '$cookies', function($rootScope, $scope, $http, $cookies) {
  $scope.isCurrentProject = function(proj) {
    return $rootScope.currentProject != null && proj.name==$rootScope.currentProject.name;
  }
}]);

tearDrop.config(['growlProvider', '$httpProvider', function(growlProvider, $httpProvider) {
    growlProvider.globalTimeToLive(5000);
}]);


tearDrop.run(function($rootScope, $timeout, $http, $cookies, growl) {
  $rootScope.currentProject=null;
  $rootScope.projects=[];
  $rootScope.reloadProjects = function() {
    $http.get('[% config.base_uri %]/api/projects').success(function(data) {
      $rootScope.projects=data;
      angular.forEach($rootScope.projects, function(p) {
        if (p.name==$cookies.project) $rootScope.setProject(p);
      });
    }).error($rootScope.errHandler);
  }
  $rootScope.reloadProjects();
  $rootScope.setProject = function(project) {
    $cookies.project=project.name;
    $rootScope.currentProject=project;
    $rootScope.reloadTags();
    $rootScope.reloadDbSources();
  }
  var workQueueStatus;
  $rootScope.workerStatus={};
  $rootScope.updateQueueStatus = function(success) {
    $http.get('[% config.base_uri %]/api/worker/status').success(function(d) {
      $rootScope.workerStatus=d;
      if (success!=null) success(d);
    });
  }
  var queryQueueStatus = function() {
    workQueueStatus = $timeout(function() {
      $rootScope.updateQueueStatus(queryQueueStatus);
    }, 30000);
  }
  $rootScope.updateQueueStatus(queryQueueStatus);

  $rootScope.dbSources=[];
  $rootScope.reloadDbSources = function() {
    $http.get('[% config.base_uri %]/api/db_sources').success(function(d) {
      $rootScope.dbSources=d;
    });
  }
  
  $rootScope.tags=[];
  $rootScope.reloadTags = function() {
    $http.get('[% config.base_uri %]/api/tags').success(function(d) {
      $rootScope.tags=d;
    });
  }

  $rootScope.errHandler=function(err) {
    console.log(err);
    if (err instanceof Object) {
      if (err.data) { growl.error(err.data.error); }
      else { growl.error(err.error); }
    }
    else {
      growl.error(err);
    }
  };

});

/**
 * Grid-light theme for Highcharts JS
 * @author Torstein Honsi
 */

Highcharts.theme = {
  /*
   colors: ["#7cb5ec", "#f7a35c", "#90ee7e", "#7798BF", "#aaeeee", "#ff0066", "#eeaaee",
      "#55BF3B", "#DF5353", "#7798BF", "#aaeeee"],
  */
   colors: ["#ff0066", "#eeaaee", "#aaeeee", "#f7a35c", "#90ee7e" ],
   chart: {
      backgroundColor: null,
   },
   title: {
      style: {
         fontSize: '16px',
         fontWeight: 'bold',
         textTransform: 'uppercase'
      }
   },
   tooltip: {
      borderWidth: 0,
      backgroundColor: 'rgba(219,219,216,0.8)',
      shadow: false
   },
   legend: {
      itemStyle: {
         fontWeight: 'bold',
         fontSize: '13px'
      }
   },
   xAxis: {
      gridLineWidth: 1,
      labels: {
         style: {
            fontSize: '12px'
         }
      }
   },
   yAxis: {
      minorGridLineWidth: 0,
      gridLineWidth: 0,
      minorTickInterval: 'auto',
      title: {
         style: {
            textTransform: 'uppercase'
         }
      },
      labels: {
         style: {
            fontSize: '12px'
         }
      }
   },
   plotOptions: {
      candlestick: {
         lineColor: '#404048'
      }
   },
   // General
   background2: '#F0F0EA'
};

// Apply the theme
Highcharts.setOptions(Highcharts.theme);
