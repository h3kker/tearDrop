'use strict';

// Declare app level module which depends on views, and components
var tearDrop = angular.module('TearDrop', [
  'ngRoute',
  'nvd3ChartDirectives',
  'angular-growl',
  'tearDropServices',
  'tearDropDirectives',
  'TearDrop.transcripts',
  'TearDrop.deresults'
]).
config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/', {
    templateUrl: '[% config.base_uri %]/app/home.html',
    controller: 'RootCtrl'
  })
  .otherwise({redirectTo: '/'});
}])
.controller('RootCtrl', [function() {
}]);

tearDrop.config(['growlProvider', '$httpProvider', function(growlProvider, $httpProvider) {
    growlProvider.globalTimeToLive(5000);
}]);


tearDrop.run(function($rootScope, $timeout, $http, growl) {
  var workQueueStatus;
  $rootScope.workerStatus={};
  $rootScope.updateQueueStatus = function(success) {
    $http.get('[% config.base_uri %]/api/worker/status').success(function(d) {
      $rootScope.workerStatus=d;
      if (success!=null) success(d);
    });
  }
  var queryQueueStatus = function() {
    workQueueStatus = $timeout(function() {
      $rootScope.updateQueueStatus(queryQueueStatus);
    }, 30000);
  }
  $rootScope.updateQueueStatus(queryQueueStatus);

  $rootScope.dbSources=[];
  $rootScope.reloadDbSources = function() {
    $http.get('[% config.base_uri %]/api/db_sources').success(function(d) {
      $rootScope.dbSources=d;
    });
  }
  $rootScope.reloadDbSources();
  
  $rootScope.tags=[];
  $rootScope.reloadTags = function() {
    $http.get('[% config.base_uri %]/api/tags').success(function(d) {
      $rootScope.tags=d;
    });
  }
  $rootScope.reloadTags();

  $rootScope.errHandler=function(err) {
    console.log(err);
    if (err instanceof Object) {
      if (err.data) { growl.error(err.data.error); }
      else { growl.error(err.error); }
    }
    else {
      growl.error(err);
    }
  };

});
