'use strict';

// Declare app level module which depends on views, and components
var tearDrop = angular.module('TearDrop', [
  'ngCookies',
  'ngRoute',
  'cgBusy',
  'highcharts-ng',
  'angular-growl',
  'tearDropServices',
  'tearDropDirectives',
  'TearDrop.transcripts',
  'TearDrop.deresults'
])
.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/', {
    templateUrl: '[% config.base_uri %]/app/home.html',
    controller: 'RootCtrl'
  })
  .when('/project', {
    templateUrl: '[% config.base_uri %]/app/project.html',
    controller: 'ProjectCtrl'
  })
  .otherwise({redirectTo: '/'});
}])
.controller('RootCtrl', ['$rootScope', '$scope', '$http', '$cookies', function($rootScope, $scope, $http, $cookies) {
  $scope.isCurrentProject = function(proj) {
    return $rootScope.currentProject != null && proj.name==$rootScope.currentProject.name;
  }
}])
.controller('ProjectCtrl', ['$rootScope', '$scope', 'Assembly', function($rootScope, $scope, Assembly) {
  $scope.assemblies=Assembly.query();
}]);

tearDrop.config(['growlProvider', '$httpProvider', function(growlProvider, $httpProvider) {
    growlProvider.globalTimeToLive(5000);
}]);
tearDrop.value('cgBusyDefaults', {
  message: 'Loading Mist from Misthaufen',
  delay: 150,
});


tearDrop.run(function($rootScope, $timeout, $http, $cookies, $cacheFactory, growl) {
  $rootScope.currentProject=null;
  $rootScope.projects=[];
  $rootScope.reloadProjects = function() {
    $http.get('[% config.base_uri %]/api/projects').success(function(data) {
      $rootScope.projects=data;
      angular.forEach($rootScope.projects, function(p) {
        if (p.name==$cookies.project) $rootScope.setProject(p);
      });
    }).error($rootScope.errHandler);
  }
  $rootScope.reloadProjects();
  $rootScope.setProject = function(project) {
    $cookies.project=project.name;
    $rootScope.currentProject=project;
    $rootScope.reloadDbSources();
  }
  var workQueueStatus;
  $rootScope.workerStatus={};
  var jobList = function(st) {
    var ret={};
    angular.forEach(st, function(cat) {
      angular.forEach(cat, function(j) {
        ret[j.id]=j;
      });
    });
    return ret;
  }
  var jobMessages = {
    queued: { category: 'warning', msg: function(j) { return "Queued Job "+j.class } },
    running: { category: 'info', msg: function(j) { return "Started Job "+j.class+" at "+new Date(Number(j.started)*1000).toTimeString() } },
    done: { category: 'success', msg: function(j) { return "Job "+j.class+" done, took "+(Math.round(j.elapsed*10)/10)+" secs." } },
    failed: { category: 'error', msg: function(j) { return "Onoz, job "+j.class+" failed!" } },
  }
  $rootScope.updateQueueStatus = function(success) {
    $http.get('[% config.base_uri %]/api/worker/status').success(function(d) {
      if (!angular.equals($rootScope.workerStatus, d)) {
        var oldJobs = jobList($rootScope.workerStatus);
        var newJobs = jobList(d);
        angular.forEach(newJobs, function(nj) {
          angular.forEach(jobMessages, function(st, status) {
            if (nj.status==status && (!oldJobs[nj.id] || oldJobs[nj.id].status != status)) {
              delete oldJobs[nj.id];
              growl[st.category](st.msg(nj));
            }
          });
          angular.forEach(oldJobs, function(oj) {
            growl[jobMessages.done.category](jobMessages.done.msg(oj));
          });
        });
      }
      $rootScope.workerStatus=d;
      if (success!=null) success(d);
    });
  }
  var queryQueueStatus = function() {
    workQueueStatus = $timeout(function() {
      $rootScope.updateQueueStatus(queryQueueStatus);
    }, 30000);
  }
  $rootScope.updateQueueStatus(queryQueueStatus);

  $rootScope.dbSources=[];
  $rootScope.reloadDbSources = function() {
    $http.get('[% config.base_uri %]/api/db_sources').success(function(d) {
      $rootScope.dbSources=d;
    });
  }
  
  $rootScope.$on('clearTagCache' , function() {
    $cacheFactory.get('$http').remove('[% config.base_uri %]/api/tags');
    $rootScope.$broadcast('reloadTags');
  });

  $rootScope.errHandler=function(err) {
    console.log(err);
    if (err instanceof Object) {
      if (err.data) { growl.error(err.data.error); }
      else { growl.error(err.error); }
    }
    else {
      growl.error(err);
    }
  };
  // should be some service or something
  $rootScope.busyPromise = null;

  Highcharts.theme = {
     colors: ["#7cb5ec", "#f7a35c", "#90ee7e", "#7798BF", "#aaeeee", "#ff0066", "#eeaaee",
        "#55BF3B", "#DF5353", "#7798BF", "#aaeeee"],
     chart: {
        backgroundColor: null,
     },
     title: {
        style: {
           fontSize: '16px',
           fontWeight: 'bold',
           textTransform: 'uppercase'
        }
     },
     tooltip: {
        borderWidth: 0,
        backgroundColor: 'rgba(219,219,216,0.8)',
        shadow: false
     },
     legend: {
        itemStyle: {
           fontWeight: 'bold',
           fontSize: '13px'
        }
     },
     xAxis: {
        gridLineWidth: 1,
        labels: {
           style: {
              fontSize: '12px'
           }
        }
     },
     yAxis: {
        minorGridLineWidth: 0,
        gridLineWidth: 0,
        minorTickInterval: 'auto',
        title: {
           style: {
              textTransform: 'uppercase'
           }
        },
        labels: {
           style: {
              fontSize: '12px'
           }
        }
     },
     plotOptions: {
        candlestick: {
           lineColor: '#404048'
        }
     },
     // General
     background2: '#F0F0EA'
  };

  // Apply the theme
  Highcharts.setOptions(Highcharts.theme);

});



/**
 * Grid-light theme for Highcharts JS
 * @author Torstein Honsi
 */

