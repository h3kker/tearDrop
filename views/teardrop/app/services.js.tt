var tearDropServices = angular.module('tearDropServices', ['ngResource']);

var objPrototype = function($rootScope) {
  return {
      save: function(postUpdate) {
        this.$save(function(t) {
          t.prepare();
          if (postUpdate!=null) {
            postUpdate();
          }
        }, $rootScope.errHandler);
      },
      setRating: function(val) {
        this.rating=val;
        this.reviewed=true;
        this.save();
      },
      addTags: function(selectedTags, newTag) {
        if (newTag != null && newTag.tag !== '') {
          selectedTags.push(newTag);
        }
        this.tags = this.tags.concat(selectedTags);
        var that=this;
        this.save(function(t) {
          if (newTag != null && newTag.tag !== '') {
            newTag.tag='';
            $rootScope.reloadTags();
          }
        });
      },
      removeTag: function(tag) {
        this.tags=this.tags.filter(function(t) {
          return t.tag!=tag.tag;
        });
        this.save();
      },
      setBlastResults: function(data) {
        this.blast_results=data;
        angular.forEach(this.blast_results, function(br) {
          ['evalue', 'length', 'ppos', 'pident'].forEach(function(f) {
            br[f]=parseFloat(br[f]);
          })
        });
      },
  }
};


tearDropServices.factory('Assembly', ['$resource',
  function($resource) {
    var Assembly = $resource('[% config.base_uri %]/api/assemblies/:id', {id:'@id'}, {
      query: {method:'GET', isArray:true, cache:true },
    });
    return Assembly;
  }
]).factory('Tag', ['$resource',
  function($resource) {
    var Tag = $resource('[% config.base_uri %]/api/tags/:tag', {tag:'@tag'}, {
      query: {method:'GET', isArray:true, cache:true },
    });
    return Tag;
  }
]).factory('Gene', ['$resource', '$rootScope', '$http', 'Transcript',
  function($resource, $rootScope, $http, Transcript){
    var Gene = $resource('[% config.base_uri %]/api/genes/:id', {id:'@id'}, {
      query: {method:'GET'},
    });
    angular.extend(Gene.prototype, objPrototype($rootScope), {
      type: 'gene',
      prepare: function() {
        this.reviewed=!!this.reviewed;
        angular.forEach(this.de_results, function(de) {
          ['log2_foldchange', 'adjp', 'pvalue', 'base_mean'].forEach(function(f) {
            de[f]=parseFloat(de[f]);
          });
        });
        var newT=[];
        angular.forEach(this.transcripts, function(t) {
          newT.push(new Transcript(t));
        });
        this.transcripts=newT;
      },
      loadBlastResults: function(callback) {
        var that=this;
        $http.get('[% config.base_uri %]/api/genes/'+this.id+'/blast_results').success(function(data) {
          that.setBlastResults(data);
          if (callback!=null) callback(data);
        }).error($rootScope.errHandler);
      },
      loadBlastRuns: function(callback) {
        var that=this;
        $http.get('[% config.base_uri %]/api/genes/'+this.id+'/blast_runs').success(function(data) {
          that.blast_runs=data;
          if (callback!=null) callback(data);
        }).error($rootScope.errHandler);
      },
    });
    return Gene;
  }
]).factory('Transcript', ['$resource', '$rootScope', '$http',
  function($resource, $rootScope, $http) {
    var Transcript = $resource('[% config.base_uri %]/api/transcripts/:id', {id:'@id'}, {
      query: {method:'GET'},
    });
    angular.extend(Transcript.prototype, objPrototype($rootScope), {
      type: 'transcript',
      prepare: function() {
        this.reviewed=!!this.reviewed;
      },
      loadBlastResults: function(callback) {
        var that=this;
        $http.get('[% config.base_uri %]/api/transcripts/'+this.id+'/blast_results').success(function(data) {
          that.setBlastResults(data);
          if (callback!=null) callback(data);
        }).error($rootScope.errHandler);
      },
      loadBlastRuns: function(callback) {
        var that=this;
        $http.get('[% config.base_uri %]/api/transcripts/'+this.id+'/blast_runs').success(function(data) {
          that.blast_runs=data;
          if (callback!=null) callback(data);
        }).error($rootScope.errHandler);
      },
      loadAlignment: function(reload) {
        if (reload || this.alignment==null) {
          this.alignment={loading: true, data: []};
          var that=this;
          $http.get('[% config.base_uri %]/api/transcripts/'+this.id+'/pileup').success(function(data) {
            that.alignment.loading=false;
            that.alignment.data=data;
          }).error($rootScope.errHandler);
        }
      },
    });
    return Transcript;
  }
]);

