'use strict';

angular.module('TearDrop.transcripts', ['ngRoute', 'ui.bootstrap', 'ui.grid', 'ui.grid.pagination'])

.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/transcripts', {
    templateUrl: '[% config.base_uri %]/app/transcripts/transcripts.html',
    controller: 'TranscriptsCtrl',
    reloadOnSearch: false,
  });
  $routeProvider.when('/genes', {
    templateUrl: '[% config.base_uri %]/app/transcripts/genes.html',
    controller: 'GenesCtrl',
    reloadOnSearch: false,
  });
  $routeProvider.when('/genes/:id', {
    templateUrl: '[% config.base_uri %]/app/transcripts/gene_details.html',
    controller: 'GenesDetailCtrl'
  });
  $routeProvider.when('/transcripts/:id', {
    templateUrl: '[% config.base_uri %]/app/transcripts/transcript_details.html',
    controller: 'TranscriptsDetailCtrl'
  });
}])
.controller('TranscriptsCtrl', ['$rootScope', '$scope', '$http', '$location', 'Assembly', function($rootScope, $scope, $http, $location) {
  if ($rootScope.transcripts==null) {
    $rootScope.transcripts={
      'pagingOptions': {
        'page': 1,
        'pagesize': 50,
      },
      'getFasta': function() {
        var search = $location.url().replace(/.+\?/, '');
        window.location.href='[% config.base_uri %]/api/transcripts/fasta?'+search;
      },
      'sort': [
        { 'field': 'id', 'direction': 'asc' },
      ],
      'filters': {
      },
    };
  }
  $scope.gridOptions={
    minRowsToShow: 20,
    columnDefs: [
      { name: 'Transcript', field: 'id', cellTemplate: '<div class="ui-grid-cell-contents"><a href="#/transcripts/{{COL_FIELD}}">{{COL_FIELD CUSTOM_FILTERS}}</a></div>' },
      { name: 'Gene', field: 'gene.id', cellTemplate: '<div class="ui-grid-cell-contents"><a href="#/genes/{{COL_FIELD}}">{{COL_FIELD CUSTOM_FILTERS}}</a></div>' },
      { name: 'Name', field: 'name' },
      { name: 'Organism', field: 'organism.scientific_name' },
      { name: 'Best Homolog', field: 'best_homolog' },
    ],
  };

  $scope.refresh = function(p) {
    $http.get('[% config.base_uri %]/api/transcripts', { 'params': p }).success(
      function(res) {
        $rootScope.transcripts.pagingOptions.total_items = res.total_items;
        $scope.gridOptions.data = res.data;
      }
    ).error($rootScope.errHandler);
  }
}])
.controller('TranscriptsDetailCtrl', ['$rootScope', '$routeParams', '$scope', '$http', 'Transcript', function($rootScope, $routeParams, $scope, $http, Transcript) {
  $scope.newTag={tag:'', level:'info'};
  $scope.selectedDbs=[];
  $scope.selectedTags=[];
  $scope.blastGridOptions={
    enableFiltering: true,
    showFooter: true,
    minRowsToShow: 50,
    multiSelect: false,
    onRegisterApi: function(gridApi) {
      gridApi.selection.on.rowSelectionChanged($scope,function(row){
        $scope.transcript.best_homolog=row.entity.source_sequence_id;
        $scope.transcript.name=row.entity.stitle;
        $scope.transcript.save();
      });
    },
  };
  $scope.transcriptDbSources = angular.copy($rootScope.dbSources);
  $scope.refresh = function() {
    $scope.transcript = Transcript.get({id: $routeParams.id}, function(data) {
      $scope.transcript.prepare();
    }, $rootScope.errHandler);
  }
  $scope.refresh();
}])
.controller('GenesCtrl', ['$rootScope', '$scope', '$http', '$location', function($rootScope, $scope, $http, $location) {

  if ($rootScope.genes == null) {
    $rootScope.genes={
      'pagingOptions': {
        'page': 1,
        'pagesize': 20,
      },
      'getFasta': function() {
        var search = $location.url().replace(/.+\?/, '');
        window.location.href='[% config.base_uri %]/api/genes/fasta?'+search;
      },
      /*
      'sort': [
        { 'field': 'id', 'direction': 'asc' },
      ],
      'filters': {
      },
      */
    };
  }
  $scope.gridOptions = {
    minRowsToShow: 20,
    columnDefs: [
     { name: 'Id', field: 'id', width: '8%', cellTemplate: '<div class="ui-grid-cell-contents"><a href="#/genes/{{COL_FIELD}}">{{COL_FIELD CUSTOM_FILTERS}}</a></div>', },
     { name: 'Rating', field: 'rating', width: '9%', cellTemplate: '<div class="ui-grid-cell-contents"><rating ng-model="MODEL_COL_FIELD" max="10" readonly="true" state-off="\'none\'"></rating></div>', },
     { name: 'Name', field: 'name', width: '40%', },
     { name: 'Organisms', field: 'organism', width: '13%', cellTemplate: '<div class="ui-grid-cell-contents"><organism-counts ng-model="MODEL_COL_FIELD"></organism-counts></div>',  },
     { name: 'Best Homolog', field: 'best_homolog', width: '15%' },
     { name: 'Reviewed', field: 'reviewed', width: '5%' },
     { name: 'Transcripts', field: 'transcripts.length', width: '5%', enableFiltering: false, enableSorting: false, },
    ],
  };
  $scope.refresh = function(p) {
    $http.get('[% config.base_uri %]/api/genes', { 'params': p }).success(
      function(res) {
        $rootScope.genes.pagingOptions.total_items = res.total_items;
        $scope.gridOptions.data = res.data;
      }
    ).error($scope.errHandler);
  }
}])
.controller('GenesDetailCtrl', ['$rootScope', '$routeParams', '$scope', '$http', 'uiGridConstants', '$timeout', 'Gene', function($rootScope, $routeParams, $scope, $http, uiGridConstants, $timeout, Gene) {
  $scope.selectedDbs=[];
  $scope.selectedTags=[];
  $scope.newTag={ tag: '', level: 'info' };
  $scope.blastGridOptions={
    enableFiltering: true,
    showFooter: true,
    minRowsToShow: 50,
    multiSelect: false,
    onRegisterApi: function(gridApi) {
      gridApi.selection.on.rowSelectionChanged($scope,function(row){
        $scope.gene.best_homolog=row.entity.source_sequence_id;
        $scope.gene.name=row.entity.stitle;
        $scope.gene.save();
      });
    },
  };
  $scope.deGridOptions={
    showFooter: true,
    rowsPerPage: 10,
    multiSelect: false,
    enableRowSelection: true,
    columnDefs: [
      { name: 'DE Run', field: 'de_run', cellTemplate: '<div class="ui-grid-cell-contents"><a href="#/deresults/{{MODEL_COL_FIELD.id}}/{{row.entity.contrast.id}}">{{MODEL_COL_FIELD.name}}</a></div>', },
      { name: 'Base Cond', field: 'contrast.base_condition.name', },
      { name: 'Contrast Cond', field: 'contrast.contrast_condition.name', },
      { name: 'Base Mean', field: 'base_mean', 
          aggregationType: uiGridConstants.aggregationTypes.avg },
      { name: 'p-value', field: 'pvalue', aggregationType: uiGridConstants.aggregationTypes.min },
      { name: 'Adjusted p-value', field: 'adjp', 
          aggregationType: uiGridConstants.aggregationTypes.min, 
      },
      { name: 'log2 Foldchange', field: 'log2_foldchange', 
          aggregationType: uiGridConstants.aggregationTypes.max,
          cellTemplate: '<div class="ui-grid-cell-contents"><pretty-foldchange ng-model="row.entity">{{COL_FIELD CUSTOM_FILTERS}}</pretty-foldchange></div>',
      },
    ],
  };
  $scope.loadTranscriptMsa = function() {
    $http.get('[% config.base_uri %]/api/genes/'+$scope.gene.id+'/transcripts/msa').success(function(d) {
      $scope.transcriptMSA=d;
    }).error($rootScope.errHandler);
  }

  $scope.refresh = function() {
    $scope.gene = Gene.get({id: $routeParams.id}, function(data) {
      $scope.gene.prepare();
      $scope.deGridOptions.data=$scope.gene.de_results;
    }, $rootScope.errHandler);
  }
  $scope.refresh();

}])

