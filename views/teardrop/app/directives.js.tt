angular.module('tearDropDirectives', []).
  directive('pagedGrid', function(uiGridConstants, $timeout) {
    return {
      restrict: 'E',
      replace: true,
      template: '<div><pagination items-per-page="param.pagingOptions.pagesize" total-items="param.pagingOptions.total_items" ng-model="param.pagingOptions.page" max-size="10" class="pagination-sm" boundary-links="true" rotate="false"></pagination><div ui-grid="gridOptions" class="grid"></div></div>',
      scope: {
        gridOptions: '=',
        refresh: '=',
        param: '=',
      },
      link: function($scope, element, attr) {
        if ($scope.param.selectedTags==null) $scope.param.selectedTags=[];
        angular.extend($scope.param, {
          addTag: function(newTag) {
            $scope.param.selectedTags.push(newTag);
            $scope.param.doRefresh();
          },
          removeTag: function(oldTag) {
            $scope.param.selectedTags=$scope.param.selectedTags.filter(function(t) {
              return t.tag!==oldTag.tag;
            });
            $scope.param.doRefresh();
          },
        });
        angular.extend($scope.gridOptions, {
          enableFiltering: true,
          useExternalFiltering: true,
          useExternalSorting: true,
          rowsPerPage: $scope.param.pagingOptions.pagesize,
        });
        angular.forEach($scope.gridOptions.columnDefs, function(col) {
          if ($scope.param.filters !== null && $scope.param.filters[col.field]) {
            col.filter={ term: $scope.param.filters[col.field] };
          }
          angular.forEach($scope.param.sort, function(v,k) {
            if (v.field==col.field) {
              col.sort={ priority: k, direction: v.direction=='asc' ? uiGridConstants.ASC : uiGridConstants.DESC };
            }
          });
        });
        $scope.gridOptions.onRegisterApi = function(gridApi) {
          gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
            $scope.param.sort=[];
            angular.forEach(sortColumns, function(col) {
              $scope.param.sort.push({
                field: col.field,
                direction: col.sort.direction==uiGridConstants.DESC ? 'desc' : 'asc',
              });
            });
            $scope.param.doRefresh();
          });
          gridApi.core.on.filterChanged($scope, function() {
            var grid = this.grid;
            $scope.param.filters={};
            angular.forEach(grid.columns, function(col) {
              angular.forEach(col.filters, function(f) {
                if (f.term !== null && f.term !== '') {
                  $scope.param.filters[col.field]=f.term;
                }
              });
            });
            if ($scope.loading !== null) $timeout.cancel($scope.loading);
            $scope.loading=$timeout(function() {
              $scope.param.doRefresh();
            }, 250);
          });

        }
        $scope.param.doRefresh = function(force) {
          var p = angular.copy($scope.param.pagingOptions);
          if ($scope.param.selectedTags.length>0) {
            p.tags=[];
            angular.forEach($scope.param.selectedTags, function(v) {
              p.tags.push(v.tag);
            });
          }
          angular.forEach($scope.param.filters, function(v,k) {
            p['filter.'+k]=v;
          });
          angular.forEach($scope.param.sort, function(v,k) {
            p['sort-'+k+'-'+v.field]=v.direction;
          });
          if (force || $scope.curParams===null || !angular.equals(p, $scope.curParams)) {
            $scope.curParams=p;
            $scope.refresh(p);
          }
        }
        $scope.$watch('param.pagingOptions', function (newVal, oldVal) {
          if (newVal !== oldVal && newVal.page !== oldVal.page) {
            $scope.param.doRefresh();
          }
        }, true);
      },
    }
  }).
  directive('clickToEdit', function() {
    var editorTemplate = '<span class="click-to-edit">' +
      '<span ng-hide="view.editorEnabled">' +
        '{{value}} ' +
        '<button class="btn btn-xs" ng-click="enableEditor()"><span class="glyphicon glyphicon-pencil"></span></button>' +
      '</span>' +
      '<span ng-show="view.editorEnabled">' +
        '<input type="text" ng-model="view.editableValue">' +
        '<span class="btn-group">'+
         '<button class="btn btn-xs btn-success" ng-click="save()"><span class="glyphicon glyphicon-ok"></span></button>' +
         '<button class="btn btn-xs btn-warning" ng-click="disableEditor()"><span class="glyphicon glyphicon-remove"></span></button>' +
        '</span>'+
       '</span>' +
      '</span>';
    return {
      restrict: 'A',
      replace: true, 
      template: editorTemplate,
      require: '^ngModel',
      scope: {
        saveCallback: '=',
      },
      link: function($scope, element, attr, ngModelCtrl) {
        ngModelCtrl.$formatters.push(function(modelValue) {
          return modelValue;
        });
        ngModelCtrl.$render = function() {
          $scope.value=ngModelCtrl.$viewValue;
        }
        ngModelCtrl.$parsers.push(function(viewValue) {
          return viewValue;
        });
        $scope.view = {
          editableValue: $scope.value,
          editorEnabled: false,
        };
        $scope.$watch('value', function() {
          if (ngModelCtrl.$viewValue !== $scope.value) {
            ngModelCtrl.$setViewValue($scope.value);
            $scope.saveCallback();
          }
        });
        $scope.enableEditor=function() {
          $scope.view.editorEnabled = true;
          $scope.view.editableValue = $scope.value;
        }
        $scope.disableEditor=function() {
          $scope.view.editorEnabled = false;
        }
        $scope.save = function() {
          $scope.value = $scope.view.editableValue;
          $scope.view.editorEnabled = false;
        }
      },
    };
  })
 .directive('reviewedDescription', function() {
   return {
     restrict: 'E',
     replace: true,
     template: '<div>'+
       '<span ng-show="ngModel.description">{{ngModel.description}}</span>'+
       '<span ng-show="!ngModel.description && ngModel.reviewed"><em>Unknown</em></span>'+
       '<span ng-show="ngModel.reviewed" class="glyphicon glyphicon-ok-sign"></span>'+
       '<span ng-hide="ngModel.reviewed" class="glyphicon glyphicon-question-sign"></span>'+
      '</div>',
     scope: {
      ngModel: '=',
     },
   }
 });

