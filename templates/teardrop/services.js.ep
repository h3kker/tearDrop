var tearDropServices = angular.module('tearDropServices', ['ngResource']);

var setupCache = function($rootScope, $cacheFactory, name, key) {
  $rootScope.$on('clear'+name , function() {
    var tkey = '<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject.name+'/'+key;
    $cacheFactory.get('$http').remove(tkey);
    $rootScope.$broadcast('reload'+name);
  });
  return { cacheName: name, clearCache: function() { $rootScope.$broadcast('clear'+cache); }, };
}

var objPrototype = function($rootScope) {
  return {
      save: function(postUpdate, errHandler) {
        return this.$save(function(t) {
          if (t.prepare != null) t.prepare();
          if (postUpdate!=null) postUpdate(t);
          $rootScope.growl.success('All your changes were acceptable.');
        }, function(err) {
          $rootScope.errHandler(err);
          if (errHandler!=null) errHandler(err);
        });
      },
      delete: function(postUpdate, errHandler) {
        return this.$delete(function(t) {
          if (postUpdate!=null) postUpdate(t);
          $rootScope.growl.success('Dispatched with extreme prejudice.');
        }, function(err) {
          $rootScope.errHandler(err);
          if (errHandler!=null) errHandler(err);
        });
      },
      getAll: function(postUpdate, errHandler) {
        var a=[];
        this.$query(function(t) {
          angular.forEach(t, function(e) {
            a.push(e);
            if (e.prepare != null) e.prepare();
          });
          if (postUpdate!=null) postUpdate(t);
        }, function(err) {
          $rootScope.errHandler(err);
          if (errHandler!=null) errHandler(err);
        });
        return a;
      },
  };
}
var transcriptPrototype = function($rootScope) {
  return angular.extend(objPrototype($rootScope), {
      setRating: function(val) {
        this.rating=val;
        this.reviewed=true;
        this.save();
      },
      addTag: function(selectedTag, newTag) {
        if (newTag != null && newTag.tag) {
          selectedTag=newTag;
        }
        this.tags = this.tags.concat(selectedTag);
        var that=this;
        this.save(function(t) {
          if (newTag != null && newTag.tag !== '') {
            newTag.tag='';
            $rootScope.$broadcast('clearTagCache');
          }
        });
      },
      removeTag: function(tag) {
        this.tags=this.tags.filter(function(t) {
          return t.tag!=tag.tag;
        });
        this.save();
      },
      setBlastResults: function(data) {
        this.blast_results=data;
        angular.forEach(this.blast_results, function(br) {
          ['evalue', 'length', 'ppos', 'pident'].forEach(function(f) {
            br[f]=parseFloat(br[f]);
          })
        });
      },
  });
};

var getRoutes = function($rootScope) {
  var params = { project: $rootScope.currentProjectName };
  return {
    'get':    {method:'GET', params: params},
    'save':   {method:'POST', params: params},
    'query':  {method:'GET', isArray:true, cache: true, params: params},
    'remove': {method:'DELETE', params: params},
    'delete': {method:'DELETE', params: params} 
  };
}

tearDropServices.factory('Assembly', ['$resource', '$rootScope', '$cacheFactory', 
  function($resource, $rootScope, $cacheFactory, uriGenerator) {
    var Assembly = $resource('<%= config->{base_uri} =%>/api/projects/:project/assemblies/:id', {id:'@id'}, getRoutes($rootScope));
    angular.extend(Assembly.prototype, 
      setupCache($rootScope, $cacheFactory, 'AssemblyCache', 'assemblies'),
      objPrototype($rootScope)
    );
    return Assembly;
  }
]).factory('DbSource', ['$resource', '$rootScope', '$cacheFactory',
  function($resource, $rootScope, $cacheFactory) {
    var DbSource = $resource('<%= config->{base_uri} =%>/api/projects/:project/dbsources/:id', {id:'@id'}, getRoutes($rootScope));
    angular.extend(DbSource.prototype, 
      setupCache($rootScope, $cacheFactory, 'DbSourceCache', 'dbsources'),
      objPrototype($rootScope)
    );
    return DbSource;
  }
]).factory('Organism', ['$resource', '$rootScope', '$cacheFactory',
  function($resource, $rootScope, $cacheFactory) {
    var Organism = $resource('<%= config->{base_uri} =%>/api/projects/:project/organisms/:id', {id:'@id'}, getRoutes($rootScope));
    angular.extend(Organism.prototype, 
      setupCache($rootScope, $cacheFactory, 'OrganismCache', 'organisms'),
      objPrototype($rootScope)
    );
    return Organism;
  }
]).factory('Tag', ['$resource', '$rootScope', '$cacheFactory',
  function($resource, $rootScope, $cacheFactory) {
    var Tag = $resource('<%= config->{base_uri} =%>/api/projects/:project/tags/:tag', {tag:'@tag'}, getRoutes($rootScope));
    angular.extend(Tag.prototype, 
      setupCache($rootScope, $cacheFactory, 'TagCache', 'tags'),
      objPrototype($rootScope)
    );
    return Tag;
  }
]).factory('Condition', ['$resource', '$rootScope', '$cacheFactory', 
  function($resource, $rootScope, $cacheFactory) {
    var Condition = $resource('<%= config->{base_uri} =%>/api/projects/:project/conditions/:name', {name:'@name'}, getRoutes($rootScope));
    angular.extend(Condition.prototype, 
      setupCache($rootScope, $cacheFactory, 'ConditionCache', 'conditions'),
      objPrototype($rootScope)
    );
    return Condition;
  }
]).factory('Sample', ['$resource', '$rootScope', '$cacheFactory',
  function($resource, $rootScope, $cacheFactory) {
    var Sample = $resource('<%= config->{base_uri} =%>/api/projects/:project/samples/:id', { id: '@id' }, getRoutes($rootScope));
    angular.extend(Sample.prototype, 
      setupCache($rootScope, $cacheFactory, 'SampleCache', 'samples'),
      objPrototype($rootScope), {
        prepare: function() {
          this.flagged=!!this.flagged;
        },
    });
    return Sample;
  }
]).factory('GeneModel', ['$resource', '$rootScope', '$cacheFactory',
  function($resource, $rootScope, $cacheFactory) {
    var GeneModel = $resource('<%= config->{base_uri} =%>/api/projects/:project/genemodels/:id', { id: '@id' }, getRoutes($rootScope));
    angular.extend(GeneModel.prototype, 
      setupCache($rootScope, $cacheFactory, 'GeneModelCache', 'genemodels'),
      objPrototype($rootScope), {
        prepare: function() {
          this.flagged=!!this.flagged;
        },
    });
    return GeneModel;
  }
]).factory('Alignment', ['$resource', '$rootScope', '$cacheFactory',
  function($resource, $rootScope, $cacheFactory) {
    var Alignment = $resource('<%= config->{base_uri} =%>/api/projects/:project/alignments/:id', { id: '@id' }, getRoutes($rootScope));
    angular.extend(Alignment.prototype, 
      setupCache($rootScope, $cacheFactory, 'AlignmentCache', 'alignments'),
      objPrototype($rootScope), {
        prepare: function() {
          this.flagged=!!this.flagged;
        },
    });
    return Alignment;
  }
]).factory('Gene', ['$resource', '$rootScope', '$http', 'Transcript',
  function($resource, $rootScope, $http, Transcript){
    var Gene = $resource('<%= config->{base_uri} =%>/api/projects/:project/genes/:id', {id:'@id'}, angular.extend(getRoutes($rootScope), {
      query: {method:'GET', params: { project: $rootScope.currentProjectName }},
    }));
    angular.extend(Gene.prototype, transcriptPrototype($rootScope), {
      type: 'gene',
      prepare: function() {
        this.reviewed=!!this.reviewed;
        angular.forEach(this.de_results, function(de) {
          ['log2_foldchange', 'adjp', 'pvalue', 'base_mean'].forEach(function(f) {
            de[f]=parseFloat(de[f]);
          });
        });
        var newT=[];
        angular.forEach(this.transcripts, function(t) {
          newT.push(new Transcript(t));
        });
        this.transcripts=newT;
      },
      loadMappings: function(callback) {
        var that=this;
        $http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject+'/genes/'+this.id+'/mappings').success(function(data) {
          if (callback!=null) callback(data);
        }).error($rootScope.errHandler);
      },
      loadBlastResults: function(callback) {
        var that=this;
        $http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject+'/genes/'+this.id+'/blast_results').success(function(data) {
          that.setBlastResults(data);
          if (callback!=null) callback(data);
        }).error($rootScope.errHandler);
      },
      loadBlastRuns: function(callback) {
        var that=this;
        $http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject+'/genes/'+this.id+'/blast_runs').success(function(data) {
          that.blast_runs=data;
          if (callback!=null) callback(data);
        }).error($rootScope.errHandler);
      },
    });
    return Gene;
  }
]).factory('Transcript', ['$resource', '$rootScope', '$http',
  function($resource, $rootScope, $http) {
    var Transcript = $resource('<%= config->{base_uri} =%>/api/projects/:project/transcripts/:id', {id:'@id'}, angular.extend(getRoutes($rootScope), {
      query: {method:'GET', params: { project: $rootScope.currentProjectName }},
    }));
    angular.extend(Transcript.prototype, transcriptPrototype($rootScope), {
      type: 'transcript',
      prepare: function() {
        this.reviewed=!!this.reviewed;
      },
      setOrganism: function() {
        this.organism=this.organism.scientific_name;
        this.save();
      },
      loadMappings: function(callback) {
        var that=this;
        $http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject+'/transcripts/'+this.id+'/mappings').success(function(data) {
          if (callback!=null) callback(data);
        }).error($rootScope.errHandler);
      },
      loadBlastResults: function(callback) {
        var that=this;
        $http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject+'/transcripts/'+this.id+'/blast_results').success(function(data) {
          that.setBlastResults(data);
          if (callback!=null) callback(data);
        }).error($rootScope.errHandler);
      },
      loadBlastRuns: function(callback) {
        var that=this;
        $http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject+'/transcripts/'+this.id+'/blast_runs').success(function(data) {
          that.blast_runs=data;
          if (callback!=null) callback(data);
        }).error($rootScope.errHandler);
      },
      loadAlignment: function(alignData, reload) {
        if (reload || alignData.alignment==null) {
          alignData.alignment={loading: true, data: {}};
          var that=this;
          $http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject+'/transcripts/'+this.id+'/pileup').success(function(data) {
            alignData.alignment.loading=false;
            alignData.alignment.data=data;
          }).error($rootScope.errHandler);
        }
      },
    });
    return Transcript;
  }
]);

