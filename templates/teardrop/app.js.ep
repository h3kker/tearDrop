'use strict';

// Declare app level module which depends on views, and components
var tearDrop = angular.module('TearDrop', [
  'ngCookies',
  'ngRoute',
  'cgBusy',
  'angular-storage',
  'ui.grid.edit',
  'ui.grid.cellNav',
  'ui.grid.autoResize',
  'highcharts-ng',
  'angular-growl',
  'tearDropServices',
  'tearDropDirectives',
  'TearDrop.transcripts',
  'TearDrop.deresults'
])
.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/', {
    templateUrl: '<%= config->{base_uri} =%>/home.html',
    controller: 'RootCtrl'
  })
  .when('/project', {
    templateUrl: '<%= config->{base_uri} =%>/project.html',
    controller: 'ProjectCtrl'
  })
  .otherwise({redirectTo: '/'});
}])
.controller('RootCtrl', ['$rootScope', '$scope', '$http', function($rootScope, $scope, $http) {
  $scope.isCurrentProject = function(proj) {
    return $rootScope.currentProject != null && proj.name==$rootScope.currentProject.name;
  }
}])
.controller('ProjectCtrl', ['$rootScope', '$scope', 'Assembly', 'Sample', 'Organism', 'Condition', 'GeneModel', 'Alignment', 'DbSource', 'uiGridConstants', function($rootScope, $scope, Assembly, Sample, Organism, Condition, GeneModel, Alignment, DbSource, uiGridConstants) {
  $scope.conditions=Condition.prototype.getAll();
  $scope.loadAssemblies=function() {
    $scope.assemblies=Assembly.prototype.getAll();
    $scope.$on('reload'+Assembly.prototype.cacheName, function() {
      $scope.loadAssemblies();
    });
  }
  $scope.loadSamples=function() {
    $scope.sampleGridOptions.data=Sample.prototype.getAll();
    $scope.$on('reload'+Sample.prototype.cacheName, function() {
      $scope.loadSamples();
    });
  }
  $scope.loadOrganisms=function() {
    $scope.organisms=Organism.prototype.getAll();
    $scope.$on('reload'+Organism.prototype.cacheName, function() {
      $scope.loadOrganisms();
    });
  }
  $scope.loadAlignments=function() {
    $scope.alignments=Alignment.prototype.getAll();
    $scope.$on('reload'+Alignment.prototype.cacheName, function() {
      $scope.loadAlignments();
    });
  }
  $scope.loadAnnotations=function() {
    $scope.annotations=GeneModel.prototype.getAll();
    $scope.$on('reload'+GeneModel.prototype.cacheName, function() {
      $scope.loadAnnotations();
    });
  }
  $scope.loadDbSources=function() {
    $scope.dbsources=DbSource.prototype.getAll();
    $scope.$on('reload'+DbSource.prototype.cacheName, function() {
      $scope.loadDbSources();
    });
  }

  $scope.sampleGridOptions={
    //showFooter: true,
    minRowsToShow: 15,
    multiSelect: true,
    enableRowSelection: true,

    columnDefs: [
      { name: 'F', type: 'boolean', field: 'flagged', cellTemplate: '<div class="ui-grid-cell-contents"><i class="fa" ng-class="'+"{ 'fa-check-circle text-success': !row.entity.flagged, 'fa-ban text-danger': row.entity.flagged }"+'"></i></div>', enableCellEdit: true, width: '5%' },
      { name: 'Id', field: 'forskalle_id', cellTemplate: '<div class="ui-grid-cell-contents"><span ng-show="{{COL_FIELD}}"><a href="http://ngs.vbcf.ac.at/forskalle/#/samples/{{COL_FIELD}}">{{COL_FIELD CUSTOM_FILTERS}}</a></span><span ng-hide="{{COL_FIELD}}">{{row.entity.id}}</span></div>', enableCellEdit: true, width: '7%', },
      { name: 'Name', field: 'name', enableCellEdit: true, width: '15%', },
      { name: 'Description', field: 'description', enableCellEdit: true, width: '*',},
      { name: 'Condition', field: 'condition.name', editableCellTemplate: 'ui-grid/dropdownEditor', editDropdownOptionsArray: $scope.conditions, editDropdownIdLabel: 'name', editDropdownValueLabel: 'name', sort: { direction: uiGridConstants.ASC, priority: 0 }, width: '10%'},
      { name: 'Rep', field: 'replicate_number', enableCellEdit: true, sort: { direction: uiGridConstants.ASC, priority: 1 }, width: '5%'},
      //{ name: 'Alignments', field: 'alignments.length', enableCellEdit: false, width: '10%' },
    ],
  };
  $scope.sampleGridOptions.onRegisterApi = function(gridApi) {
    $scope.sampleGridApi=gridApi;
    gridApi.edit.on.afterCellEdit($scope,function(rowEntity, colDef, newValue, oldValue){
      if (!angular.equals(newValue, oldValue)) {
        if (!rowEntity.id && (!rowEntity.description || !rowEntity.name || !rowEntity.condition)) {
          return;
        }
        rowEntity.save();
      }
    });
  }
  $scope.deleteSamples=function() {
    angular.forEach($scope.sampleGridApi.selection.getSelectedRows(), function(d) {
      d.delete(function() { $scope.loadSamples() });
    });
  }
  $scope.addSample=function() {
    var newSample = new Sample({ name: 'give me a name...', });
    $scope.sampleGridOptions.data.push(newSample);
    //XXX make me work
    //$scope.sampleGridApi.cellNav.scrollTo( $scope.sampleGridApi.grid, $scope, $scope.sampleGridOptions.data[$scope.sampleGridOptions.data.length-1], $scope.sampleGridOptions.columnDefs[1]); 
  }

}]);

tearDrop.config(['growlProvider', '$httpProvider', function(growlProvider, $httpProvider) {
    growlProvider.globalTimeToLive(5000);
}]);
tearDrop.value('cgBusyDefaults', {
  message: 'Loading Mist from Misthaufen',
  delay: 150,
});


tearDrop.run(function($rootScope, $timeout, $http, $cacheFactory, growl, store) {
  $rootScope.growl=growl;
  try {
    $rootScope.currentProject=store.get('project'); //angular.fromJson(window.localStorage.getItem('project'));
  }
  catch(e) {
    $rootScope.currentProject=null;
  }
  $rootScope.projects=[];
  $rootScope.reloadProjects = function() {
    $http.get('<%= config->{base_uri} =%>/api/projects').success(function(data) {
      $rootScope.projects=data;
      angular.forEach($rootScope.projects, function(p) {
        if (window.localStorage.getItem('projectName')==p.name) $rootScope.setProject(p);
      });
    }).error($rootScope.errHandler);
  }
  $rootScope.reloadProjects();
  $rootScope.setProject = function(project) {
    store.set('project', project);
    store.set('projectName', project.name);
    $rootScope.currentProject=project;
  }
  $rootScope.currentProjectName = function() {
    if (!$rootScope.currentProject) return null;
    return $rootScope.currentProject.name;
  }
  var workQueueStatus;
  $rootScope.workerStatus={};
  var jobList = function(st) {
    var ret={};
    angular.forEach(st, function(cat) {
      angular.forEach(cat, function(j) {
        ret[j.id]=j;
      });
    });
    return ret;
  }
  var jobMessages = {
    queued: { category: 'warning', msg: function(j) { return "Queued Job "+j.class } },
    running: { category: 'info', msg: function(j) { return "Started Job "+j.class+" at "+new Date(Number(j.started)*1000).toTimeString() } },
    done: { category: 'success', msg: function(j) { return "Job "+j.class+" done, took "+(Math.round(j.elapsed*10)/10)+" secs." } },
    failed: { category: 'error', msg: function(j) { return "Onoz, job "+j.class+" failed!" } },
  }
  $rootScope.updateQueueStatus = function(success) {
    $http.get('<%= config->{base_uri} =%>/api/worker/status').success(function(d) {
      if (!angular.equals($rootScope.workerStatus, d)) {
        var oldJobs = jobList($rootScope.workerStatus);
        var newJobs = jobList(d);
        angular.forEach(newJobs, function(nj) {
          angular.forEach(jobMessages, function(st, status) {
            if (nj.status==status && (!oldJobs[nj.id] || oldJobs[nj.id].status != status)) {
              delete oldJobs[nj.id];
              //growl[st.category](st.msg(nj));
            }
          });
          angular.forEach(oldJobs, function(oj) {
            //growl[jobMessages.done.category](jobMessages.done.msg(oj));
          });
        });
      }
      $rootScope.workerStatus=d;
      if (success!=null) success(d);
    });
  }
  var queryQueueStatus = function() {
    workQueueStatus = $timeout(function() {
      $rootScope.updateQueueStatus(queryQueueStatus);
    }, 30000);
  }
  $rootScope.updateQueueStatus(queryQueueStatus);

  $rootScope.errHandler=function(err) {
    console.log(err);
    if (err instanceof Object) {
      if (err.data) { growl.error(err.data.error); }
      else { growl.error(err.error); }
    }
    else {
      growl.error(err);
    }
  };
  // should be some service or something
  $rootScope.busyPromise = null;

  Highcharts.theme = {
     colors: ["#7cb5ec", "#f7a35c", "#90ee7e", "#7798BF", "#aaeeee", "#ff0066", "#eeaaee",
        "#55BF3B", "#DF5353", "#7798BF", "#aaeeee"],
     chart: {
        backgroundColor: null,
     },
     title: {
        style: {
           fontSize: '16px',
           fontWeight: 'bold',
           textTransform: 'uppercase'
        }
     },
     tooltip: {
        borderWidth: 0,
        backgroundColor: 'rgba(219,219,216,0.8)',
        shadow: false
     },
     legend: {
        itemStyle: {
           fontWeight: 'bold',
           fontSize: '13px'
        }
     },
     xAxis: {
        gridLineWidth: 1,
        labels: {
           style: {
              fontSize: '12px'
           }
        }
     },
     yAxis: {
        minorGridLineWidth: 0,
        gridLineWidth: 0,
        minorTickInterval: 'auto',
        title: {
           style: {
              textTransform: 'uppercase'
           }
        },
        labels: {
           style: {
              fontSize: '12px'
           }
        }
     },
     plotOptions: {
        candlestick: {
           lineColor: '#404048'
        }
     },
     // General
     background2: '#F0F0EA'
  };

  // Apply the theme
  Highcharts.setOptions(Highcharts.theme);

});



/**
 * Grid-light theme for Highcharts JS
 * @author Torstein Honsi
 */

