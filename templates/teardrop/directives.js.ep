angular.module('tearDropDirectives', []).
  directive('blastGrid', function(uiGridConstants, $rootScope, $http, $timeout, DbSource) {
    return {
      restrict: 'E',
      replace: true,
      templateUrl: '<%= config->{base_uri} =%>/partials/homologies.html',
      scope: {
        gridOptions: '=',
        ngModel: '=',
      },
      link: function($scope, element, attr) {
        $scope.tags=$rootScope.tags;
        $scope.selectedDbs=[];
        $scope.dbSources=[];
        $scope.dbSources=DbSource.prototype.getAll();
        $scope.$on('reload'+DbSource.prototype.cacheName, function() {
          $scope.dbSources=DbSource.prototype.getAll();
        });
        angular.extend($scope.gridOptions, {
          showFooter: true,
          enableFiltering: true,
          minRowsToShow: 50,
          multiSelect: false,
          columnDefs: [
            { name: 'Transcript', field: 'transcript_id', width: '10%', filter: { condition: uiGridConstants.filter.CONTAINS } },
            { name: 'DB', field: 'db_source', width: '10%', filter: { condition: uiGridConstants.filter.CONTAINS }},
            { name: 'Hit', field: 'stitle', width: '40%', filter: { condition: uiGridConstants.filter.CONTAINS }},
            { name: 'e-value', field: 'evalue', width: '10%', sort: { priority: 0, direction: uiGridConstants.ASC }, filter: { condition: uiGridConstants.filter.LESS_THAN } },
            { name: 'Match Length', field: 'length', width: '10%', filter: { condition: uiGridConstants.filter.GREATER_THAN } },
            { name: 'positive %', field: 'ppos', width: '10%', filter: { condition: uiGridConstants.filter.GREATER_THAN } },
            { name: 'identical %', field: 'pident', width: '10%', sort: { priority: 1, direction: uiGridConstants.DESC }, filter: { condition: uiGridConstants.filter.GREATER_THAN } },
          ],
        });
        $scope.gridOptions.onRegisterApi = function(gridApi) {
          gridApi.selection.on.rowSelectionChanged($scope,function(row){
            $scope.ngModel.best_homolog=row.entity.source_sequence_id;
            $scope.ngModel.name=row.entity.stitle;
            $scope.ngModel.save();
          });
        };
        $scope.runBlast = function(selectedDbs) {
          angular.forEach(selectedDbs, function(db) {
            $http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject.name+'/'+$scope.ngModel.type+'s/'+$scope.ngModel.id+'/run_blast', {
              'params': { database: db.name }
            }).success(function(d) {
              db.status='started';
              $rootScope.updateQueueStatus();
              var queryJobStatus = function(pid) {
                $timeout(function() {
                  $http.get('<%= config->{base_uri} =%>/api/worker/status/'+pid).success(function(jobData) {
                    angular.forEach($scope.dbSources, function(dbs) {
                      if (dbs.name==db.name) {
                        dbs.status=jobData.status;
                      }
                    });
                    if (jobData.status != 'done' && jobData.status != 'failed') {
                      queryJobStatus(pid);
                    }
                    else if (jobData.status == 'done') {
                      $rootScope.updateQueueStatus();
                      $scope.loadHomologs(true);
                    }
                  });
                }, 5000);
              }
              if (d.id) {
                queryJobStatus(d.id);
              }
            }).error($rootScope.errHandler);
          });
        }

        $scope.loadHomologs = function(reload) {
          if (reload || $scope.ngModel.blast_results==null) {
            $scope.ngModel.loadBlastRuns($scope.setBlastRuns);
            $scope.ngModel.loadBlastResults(function(data) {
              $scope.gridOptions.data=$scope.ngModel.blast_results;
            });
          }
        }

        $scope.setBlastRuns = function() {
          angular.forEach($scope.dbSources, function(db) {
            if (db.status==null || db.status=='') db.status='not run';
          });
          angular.forEach($scope.ngModel.blast_runs, function(br) {
            angular.forEach($scope.dbSources, function(db) {
              if (db.status == null) {
                db.status='not run';
              }
              if (db.name==br.db_source.name) {
                if ($scope.ngModel.transcripts != null) 
                  db.status='done - '+br.hits+' hits on '+br.matched_transcripts+'/'+$scope.ngModel.transcripts.length+' transcripts';
                else 
                  db.status='done - '+br.hits+' hits';
                db.hits=br.hits;
                db.matched_transcripts=br.matched_transcripts;
              }
            });
          });
        }
        $scope.$watch('ngModel.id', function(newVal, oldVal) {
          if (newVal != null && newVal != oldVal) $scope.loadHomologs();
        });
      },
         
    }
  }).
  directive('pagedGrid', function(uiGridConstants, $timeout, $location, $rootScope, Assembly, Tag) {
    return {
      restrict: 'E',
      replace: true,
      templateUrl: '<%= config->{base_uri} =%>/partials/paged_grid.html',
      scope: {
        gridOptions: '=',
        refresh: '=',
        param: '=',
      },
      link: function($scope, element, attr) {
        $scope.showAssemblySelector=attr.showAssemblySelector;
        $scope.showTagSelector=attr.showTagSelector;
        $scope.tags=Tag.prototype.getAll();
        if ($scope.showAssemblySelector) {
          $scope.assemblies=Assembly.prototype.getAll();
          $scope.setAssembly = function() {
            if ($scope.param.filters.assembly_id==null || $scope.param.filters.assembly_id=='') {
              delete $scope.param.filters.assembly_id;
            }
            $scope.param.doRefresh();
          }
        }
        if ($scope.param.selectedTags==null) $scope.param.selectedTags=[];
        if ($scope.param.sort==null) $scope.param.sort=[];
        if ($scope.param.filters==null) $scope.param.filters={};
        angular.extend($scope.param, {
          addTag: function(newTag) {
            if (newTag.tag=='') return;
            if (!$scope.param.selectedTags.some(function(t) { return t.tag==newTag.tag })) {
              $scope.param.selectedTags.push(newTag);
              $scope.param.doRefresh();
            }
          },
          removeTag: function(oldTag) {
            $scope.param.selectedTags=$scope.param.selectedTags.filter(function(t) {
              return t.tag!==oldTag.tag;
            });
            $scope.param.doRefresh();
          },
        });
        angular.forEach($location.search(), function(v,k) {
          if (k==='page' || k==='pagesize') {
            $scope.param.pagingOptions[k]=v;
          }
          if (k.match(/^sort-/)) {
            var s=k.split('-', 3);
            $scope.param.sort[s[1]]={ field: s[2], direction: v };
          }
          var s = k.match(/^filter\.(.+)/);
          if (s) {
            if (s[1]==='tags') {
              angular.forEach(v, function(wanted) {
                angular.forEach($rootScope.tags, function(tag) {
                  if (tag.tag===wanted) {
                    if (!$scope.param.selectedTags.some(function(t) { return t.tag==wanted })) {
                      $scope.param.selectedTags.push(tag);
                    }
                  }
                });
              });
            }
            else {
              $scope.param.filters[s[1]]=v;
            }
          }
        });
        angular.extend($scope.gridOptions, {
          enableFiltering: true,
          useExternalFiltering: true,
          useExternalSorting: true,
          rowsPerPage: $scope.param.pagingOptions.pagesize,
        });
        angular.forEach($scope.gridOptions.columnDefs, function(col) {
          if ($scope.param.filters != null && $scope.param.filters[col.field]) {
            col.filter={ term: $scope.param.filters[col.field] };
          }
          angular.forEach($scope.param.sort, function(v,k) {
            if (v.field==col.field) {
              col.sort={ priority: k, direction: v.direction=='asc' ? uiGridConstants.ASC : uiGridConstants.DESC };
            }
          });
        });
        $scope.gridOptions.onRegisterApi = function(gridApi) {
          gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
            $scope.param.sort=[];
            angular.forEach(sortColumns, function(col) {
              $scope.param.sort.push({
                field: col.field,
                direction: col.sort.direction==uiGridConstants.DESC ? 'desc' : 'asc',
              });
            });
            $scope.param.doRefresh();
          });
          gridApi.core.on.filterChanged($scope, function() {
            var grid = this.grid;
            //$scope.param.filters={};
            angular.forEach(grid.columns, function(col) {
              angular.forEach(col.filters, function(f) {
                if (f.term !== null && f.term !== '') {
                  $scope.param.filters[col.field]=f.term;
                }
                else {
                  delete $scope.param.filters[col.field];
                }
              });
            });
            if ($scope.loading !== null) $timeout.cancel($scope.loading);
            $scope.loading=$timeout(function() {
              $scope.param.doRefresh();
            }, 250);
          });

        }
        $scope.param.generateUrlParams = function(p) {
          if (p==null) p={};
          if ($scope.param.selectedTags.length>0) {
            p['filter.tags']=[];
            angular.forEach($scope.param.selectedTags, function(v) {
              p['filter.tags'].push(v.tag);
            });
          }
          angular.forEach($scope.param.filters, function(v,k) {
            p['filter.'+k]=v;
          });
          angular.forEach($scope.param.sort, function(v,k) {
            p['sort-'+k+'-'+v.field]=v.direction;
          });
          $location.search(p);
          return p;
        }
        $scope.param.doRefresh = function(force) {
          var p = $scope.param.generateUrlParams(angular.copy($scope.param.pagingOptions));
          if (force || $scope.curParams===null || !angular.equals(p, $scope.curParams)) {
            $scope.loading=true;
            $scope.curParams=p;
            $scope.refresh(p, function() { $scope.loading=false });
          }
        }
        $scope.$watch('param.pagingOptions', function (newVal, oldVal) {
          if (newVal !== oldVal && newVal.page !== oldVal.page) {
            $scope.param.doRefresh();
          }
        }, true);
        $scope.param.doRefresh();
      },
    }
  }).
  directive('addTags', function($rootScope, Tag) {
    return {
      restrict: 'E',
      replace: true,
      templateUrl: '<%= config->{base_uri} =%>/partials/addtags.html',
      scope: {
        ngModel: '=',
        tagFilter: '@',
      },
      link: function($scope, element, attr) {
        $scope.tags=Tag.prototype.getAll();
        if ($scope.tagFilter) {
          $scope.parsedFilter=$scope.$eval($scope.tagFilter);
        }
        $scope.newTag={};
        $scope.newTag.level='info';
        $scope.$on('reload'+Tag.prototype.cacheName, function() {
          $scope.tags=Tag.prototype.getAll();
        });
      },
    }
  }).
  directive('clickToEdit', function() {
    return {
      restrict: 'A',
      replace: true, 
      transclude: true,
      templateUrl: '<%= config->{base_uri} =%>/partials/editable.html',
      require: '^ngModel',
      scope: {
        saveCallback: '=',
        selectValues: '=?',
        editType: '=?',
      },
      link: function($scope, element, attr, ngModelCtrl) {
        $scope.selectOptions=attr.selectOptions;
        if ($scope.editType==null) {
          $scope.editType=$scope.selectOptions != null ? 'select' : 'text';
        }
        console.log($scope.editType);
        ngModelCtrl.$render = function() {
          $scope.value=ngModelCtrl.$viewValue;
        }
        $scope.view = {
          editableValue: $scope.value,
          editorEnabled: false,
        };
        $scope.$watch('view.editableValue', function(newVal) {
          if ($scope.editType=='text' && newVal != null && newVal.length > 80) {
            $scope.editType='textarea';
          }
        });
        $scope.$watch('value', function() {
          if (ngModelCtrl.$viewValue !== $scope.value) {
            ngModelCtrl.$setViewValue($scope.value);
            $scope.saveCallback();
          }
        });
        $scope.enableEditor=function() {
          $scope.view.editorEnabled = true;
          $scope.view.editableValue = $scope.value;
        }
        $scope.disableEditor=function() {
          $scope.view.editorEnabled = false;
        }
        $scope.save = function() {
          $scope.value = $scope.view.editableValue;
          $scope.view.editorEnabled = false;
        }
      },
    };
  })
  .directive('organismCounts', function() {
    return {
      restrict: 'E',
      replace: true,
      template: '<div>'+
         '<span ng-repeat="org in ngModel | orderBy:\'count\'">{{org.scientific_name}}: {{org.count}}</span>'+
        '</div>',
      scope: {
        ngModel: '=',
      },
    }
  })
  .directive('prettyFoldchange', function() {
    return {
      restrict: 'E',
      template: '<span ng-style="fcStyle">{{ngModel.log2_foldchange}}</span>',
      transclude: true,
      scope: {
        ngModel: '=',
      },
      link: function($scope, element, attr) {
        var hue=Math.max(120, Math.min(360, 240-$scope.ngModel.log2_foldchange/5*120));
        var alpha=Math.max(0.5, Math.min(1, -1*Math.log10($scope.ngModel.adjp)/2));
        $scope.fcStyle={
          'color': 'hsla('+hue+',60%,70%,'+alpha+')',
        };
      },
    }
  })
  .directive('alignmentViewer', function($filter) {
    return {
      restrict: 'E',
      replace: true,
      templateUrl: '<%= config->{base_uri} =%>/partials/alignment_viewer.html',
      scope: {
        alignmentData: '=data',
        load: '=?',
        width: '=?',
        height: '=?',
      },
      compile: function(element, attr) {
        return {
          pre: function($scope, element, attr) {
            if ($scope.width==null) $scope.width=1000;
            if ($scope.height==null) $scope.height=500;
            $scope.coverageChartConfig = {
              options: {
                "chart": { "type": "area", zoomType: 'x', events: { redraw: function() { $scope.drawAnnotations() } } },
                "plotOptions": { 
                  //"series": { "stacking":"normal",  }, 
                  "line": { marker: { enabled: false } },
                  "scatter": { marker: { radius: 2, enabled: true } },
                },
                legend: {
                  enabled: false,
                },
              },
              series: [],
              title: { text: '' },
              loading: false,
              xAxis: {  },
              yAxis: [
                { title: { text: 'Coverage' }, },
                //{ title: { text: 'Mismatch Rate' }, opposite: true, min: 0 }
              ],
              size: { width: $scope.width, height: $scope.height, },
              func: function(chart) {
                $scope.chart=chart;
              },
            };
          },
          post: function($scope, element, attr) {
            $scope.annoGroup=null;
            $scope.showMismatch=false;
            $scope.showStranded=false;
            $scope.showCoverage=true;
            $scope.showAnnotations=true;
            $scope.reload=function() {
              $scope.load($scope.alignmentData, $scope.alignmentData.region, true);
            };
            var zoomFactor=.5;
            $scope.zoomOut=function() {
              var by=Math.round(($scope.alignmentData.region.cend-$scope.alignmentData.region.cstart)*zoomFactor/2);
              $scope.alignmentData.region={cstart: $scope.alignmentData.region.cstart-by, cend: $scope.alignmentData.region.cend+by};
              $scope.reload();
            }
            $scope.zoomIn=function() {
              var by=Math.round(($scope.alignmentData.region.cend-$scope.alignmentData.region.cstart)*zoomFactor/2);
              $scope.alignmentData.region={cstart: $scope.alignmentData.region.cstart+by, cend: $scope.alignmentData.region.cend-by};
              $scope.reload();
            }
            $scope.resetChartData=function() {
              $scope.samples={};
              $scope.chartData={
                mismatch: [],
                coverage: [],
                strandedCoverage: [],
              };
            }
            $scope.resetChartData();
            $scope.generateSeries=function() {
              $scope.coverageChartConfig.series=[];
              $scope.coverageChartConfig.xAxis.min=$scope.alignmentData.region.cstart;
              $scope.coverageChartConfig.xAxis.max=$scope.alignmentData.region.cend;
              if ($scope.showCoverage) {
                angular.forEach($scope.chartData.coverage, function(item) {
                  if ($scope.samples[item.sample].visible) $scope.coverageChartConfig.series.push(item);
                });
              }
              if ($scope.showMismatch) {
                angular.forEach($scope.chartData.mismatch, function(item) {
                  if ($scope.samples[item.sample].visible) $scope.coverageChartConfig.series.push(item);
                });
              }
              if ($scope.showStranded) {
                angular.forEach($scope.chartData.strandedCoverage, function(item) {
                  if ($scope.samples[item.sample].visible) $scope.coverageChartConfig.series.push(item);
                });
              }
              /*
                $scope.chart.renderer.rect($scope.chart.xAxis[0].toPixels(100), $scope.chart.yAxis[0].toPixels(100), 100, 100)
                  .attr({
                      'stroke-width': 2,
                      stroke: 'red',
                      fill: 'yellow',
                      zIndex: 3
                  }).add();
                  */
            }
            $scope.drawAnnotations = function() {
              $('g#anno').remove();
              $scope.annoGroup=null;
              var fillColor = function(ann) {
                return ann.annotation_type == 'transcript' ? '#ccc' : '#C5FFC5';
              }
              var stackHeight=0;
              var mrnaHeight=15;
              if ($scope.showAnnotations && $scope.alignmentData.annotations != null && $scope.chart.yAxis[0].dataMin!=null) {
                var convertCoords = function(tann) {
                  return {
                    cstart: $scope.chart.xAxis[0].toPixels(tann.cstart),
                    cend: $scope.chart.xAxis[0].toPixels(tann.cend),
                  };
                }
                $scope.annoGroup = $scope.chart.renderer.g().attr({'id': 'anno'}).add();
                var drawElements = {
                  gene: function(el) {
                    var coords = convertCoords(el);
                    var transY = $scope.chart.yAxis[0].toPixels(0)-stackHeight;
                    el.group = $scope.chart.renderer.g().attr({
                      'id': 'gene.'+el.id,
                      'transform': 'translate(0,'+transY+')'
                    }).add($scope.annoGroup);
                    var geneHeight=el.children.length*mrnaHeight;
                    stackHeight+=geneHeight;
                    $scope.chart.renderer
                      .rect(coords.cstart, 1, coords.cend-coords.cstart, geneHeight-2)
                      .attr({
                        'stroke-width': 0, 
                        'fill-opacity': 0.25,
                        stroke: '#777', 
                        fill: fillColor(el) 
                      }).add(el.group);
                    angular.forEach(el.children, function(child, childIdx) {
                      child.parentGroup=el.group;
                      drawElements[child.mtype](child, childIdx);
                    });
                  },
                  mRNA: function(el, idx) {
                    var transY = idx*mrnaHeight*-1;
                    if (el.parentGroup==null) {
                      transY = $scope.chart.yAxis[0].toPixels(0)-stackHeight;
                      stackHeight+=mrnaHeight;
                    }

                    var coords = convertCoords(el);
                     el.group = $scope.chart.renderer.g().attr({
                      'id': 'mRNA.'+el.id,
                      'transform': 'translate(0,'+transY+')',
                    }).add(el.parentGroup ? el.parentGroup : $scope.annoGroup);
                    $scope.chart.renderer
                      .rect(coords.cstart, 3, coords.cend-coords.cstart, mrnaHeight-6)
                      .attr({
                        'stroke-width': 0, 
                        'fill-opacity': .5,
                        stroke: 'black', 
                        fill: fillColor(el) 
                      }).add(el.group);

                    var hasExon = el.children.some(function(child) { return child.mtype=='exon' });
                    angular.forEach(el.children, function(child, childIdx) {
                      child.parentGroup=el.group;
                      if (hasExon && child.mtype=='exon') {
                        drawElements[child.mtype](child, childIdx);
                      }
                      else if (!hasExon && child.mtype=='CDS') {
                        drawElements.exon(child, childIdx);
                      }
                    });

                    $scope.chart.renderer.text(el.id, $scope.chart.chartWidth-5, mrnaHeight-2).attr({ 'text-anchor': 'end' }).add(el.group);
                  },
                  exon: function(el) {
                    var coords = convertCoords(el);
                    $scope.chart.renderer
                      .rect(coords.cstart, 2, coords.cend-coords.cstart, mrnaHeight-4, 2)
                      .attr({
                          'stroke-width': 2, 
                          'stroke-opacity': 1,
                          'fill-opacity': .75,
                          stroke: '#333', 
                          fill: fillColor(el) 
                      }).add(el.parentGroup);
                  },
                };
                angular.forEach($scope.alignmentData.annotations, function(root, rootIdx) {
                  drawElements[root.mtype](root, rootIdx);
                });

              }
            }
            $scope.setVisible = function(sample) {
              sample.visible=!sample.visible;
              $scope.updateChart();
            }
            $scope.setOnlyVisible = function(sample) {
              sample.visible=true;
              angular.forEach($scope.samples, function(s) {
                if (s!==sample) s.visible=false;
              });
              $scope.updateChart();
            }
            $scope.updateChart = function() {
              $scope.generateSeries();
            }
            $scope.$watch('alignmentData.alignment.loading', function(newVal) {
              $scope.coverageChartConfig.loading=newVal;
            });
            $scope.$watch('alignmentData.alignment.data', function(newVal, oldVal) {
              if (angular.equals(newVal, oldVal)) return;
              $scope.coverageChartConfig.series=[];
              $scope.resetChartData();
              if (newVal==null) return;
              var sampleIdx=0;
              angular.forEach(newVal.coverage_plus, function(s, sample) {
                s.sample=s.name;
                s.visible=true;
                s.legendStyle=function() { return { 'background-color': this.visible ? this.color : '#ccc' } };
                s.color=Highcharts.theme.colors[sampleIdx % Highcharts.theme.colors.length];
                $scope.samples[s.sample]=s;
                sampleIdx++;

                tmp=angular.copy(s);
                tmp.type='line';
                tmp.name=s.name+'+';
                tmp.cat='stranded';
                angular.forEach(s.data, function(v,k) {
                  //tmp.data[k] = [$scope.alignmentData.alignment.data.offset+k*$scope.alignmentData.alignment.data.binwidth, s.data[k]-newVal.coverage_minus[sample].data[k] ];
                  //tmp.data[k] = [$scope.alignmentData.alignment.data.offset+k*$scope.alignmentData.alignment.data.binwidth, s.data[k] ];
                  tmp.data[k] = [ newVal.coords[sample].data[k], s.data[k] ];
                  //if (tmp.data[k][1]==0) tmp.data[k]=null;
                });
                $scope.chartData.strandedCoverage.push(tmp);

                s.type='line';
                s.cat='coverage';
                angular.forEach(s.data, function(v,k) {
                  //s.data[k] = s.data[k]>0 ? s.data[k] : null;
                  //s.data[k] = [$scope.alignmentData.alignment.data.offset+k*$scope.alignmentData.alignment.data.binwidth, s.data[k]+newVal.coverage_minus[sample].data[k]];
                  s.data[k] = [ newVal.coords[sample].data[k], s.data[k]+newVal.coverage_minus[sample].data[k] ];
                });
                $scope.chartData.coverage.push(s);

              });
              angular.forEach(newVal.coverage_minus, function(s, sample) {
                s.type='line';
                s.sample=s.name;
                s.color=$scope.samples[s.sample].color;
                s.name=s.name+'-';
                s.cat='stranded';
                angular.forEach(s.data, function(v,k) {
                  s.data[k] = [newVal.coords[sample].data[k], s.data[k]*-1 ];
                });
                $scope.chartData.strandedCoverage.push(s);
              });
              angular.forEach(newVal.mismatch, function(s, sample) {
                s.type='bar';
                s.sample=s.name;
                s.color=$scope.samples[s.sample].color;
                s.name=s.name+' Mis';
                s.cat='mismatch';
                s.stacking='normal';
                //s.yAxis=1;
                angular.forEach(s.data, function(v,k) {
                  /*
                  s.data[k]=data.coverage[sample].data[k]>0 ? 
                    s.data[k]/data.coverage[sample].data[k] : null;
                  */
                  s.data[k]=[newVal.coords[sample].data[k], s.data[k]>0 ? s.data[k] : null];
                });
                $scope.chartData.mismatch.push(s);
              });
              $scope.generateSeries();
            });
          },
        };
      },
    };
  })
  .directive('genomeAlignments', function($http, $rootScope) {
    return {
      restrict: 'E',
      replace: true,
      templateUrl: '<%= config->{base_uri} =%>/partials/genome_alignments.html',
      scope: {
        mappings: '=',
      },
      link: function($scope, element, attr) {
        $scope.loadAnnotations = function(map, reload, callback) {
          if (map.region==null) map.region={cstart: map.tstart, cend: map.tend}; 
          if (reload || map.annotations==null) {
            map.annotations=[];
            $http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject.name+'/genomemappings/'+map.genome_mapping_id+'/annotations', {params: {tid: map.tid, tstart: map.region.cstart, tend: map.region.cend}}).success(function(data) {
                map.annotations=data;
                if (callback!=null) callback(data);
            }).error($rootScope.errHandler);
          }
        }

        $scope.loadGenomeAlignments = function(map, region, reload) {
          console.log('load!');
          if (map==null) return;
          if (reload || map.alignment==null) {
            if (region != null) map.region=region;
            var start = map.region.cstart, end = map.region.cend;
            map.alignment={loading: true, data: {}};
            $http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject.name+'/genomemappings/'+map.genome_mapping_id+'/pileup', {params: {tid: map.tid, tstart: start, tend: end}}).success(function(data) {
              map.alignment.data=data;
              map.alignment.loading=false;
            }).error($rootScope.errHandler);
          }
        }
        $scope.$watchCollection('mappings', function(newMaps) {
          angular.forEach($scope.mappings, $scope.loadAnnotations);
        });
      },
    }
  })
  .directive('transcriptAlignment', function($http, $rootScope) {
    return {
      restrict: 'E',
      replace: true,
      scope: {
        transcript: '=',
        alignData: '=',
      },
      templateUrl: '<%= config->{base_uri} =%>/partials/transcript_alignment.html',
      link: function($scope, element, attr) {
        console.log($scope.alignData);
      },
    }
  })
  .directive('reviewedDescription', function() {
   return {
     restrict: 'E',
     replace: true,
     template: '<div>'+
       '<span ng-show="ngModel.name">{{ngModel.name}}</span>'+
       '<span ng-show="!ngModel.name && ngModel.reviewed"><em>Unknown</em></span>'+
       '<span ng-show="ngModel.reviewed" class="fa fa-check-circle"></span>'+
       '<span ng-hide="ngModel.reviewed" style="font-size: 1.2em" class="text-warning fa fa-question-circle"></span>'+
      '</div>',
     scope: {
      ngModel: '=',
     },
   }
 });

