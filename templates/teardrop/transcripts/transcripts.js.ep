'use strict';

angular.module('TearDrop.transcripts', ['ngRoute', 'ui.bootstrap', 'ui.grid', 'ui.grid.pagination'])

.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/transcripts', {
    templateUrl: '<%= config->{base_uri} =%>/transcripts/transcripts.html',
    controller: 'TranscriptsCtrl',
    reloadOnSearch: false,
  });
  $routeProvider.when('/genes', {
    templateUrl: '<%= config->{base_uri} =%>/transcripts/genes.html',
    controller: 'GenesCtrl',
    reloadOnSearch: false,
  });
  $routeProvider.when('/blast', {
    templateUrl: '<%= config->{base_uri} =%>/transcripts/blast.html',
    controller: 'BlastCtrl',
  });
  $routeProvider.when('/genes/:id', {
    templateUrl: '<%= config->{base_uri} =%>/transcripts/gene_details.html',
    controller: 'GenesDetailCtrl'
  });
  $routeProvider.when('/transcripts/:id', {
    templateUrl: '<%= config->{base_uri} =%>/transcripts/transcript_details.html',
    controller: 'TranscriptsDetailCtrl'
  });
}])
.controller('BlastCtrl', ['$rootScope', '$scope', '$http', 'Assembly', 'uiGridConstants', 'store', function($rootScope, $scope, $http, Assembly, uiGridConstants, store) {
  $scope.assemblies=Assembly.prototype.getAll(
    function(d) {
      if (d.length==1 && $scope.blastSearch.assemblyId==null) {
        $scope.blastSearch.assemblyId=d[0].id
      }
    }
  );
  $scope.blastSearch=store.get('lastBlastSearch');
  if ($scope.blastSearch==null) {
    $scope.blastSearch={type: 'nucl', lastResult: []};
  }
  $scope.$watch('blastSearch.sequence', function(newV, oldV) {
    if (newV != null && newV != oldV) {
      newV.split(/\r?\n/).forEach(function(l) {
        if (!l.match(/^>/)) {
          $scope.blastSearch.type = l.match(/^[ACGTN]+$/i) ? 'nucl' : 'prot';
        }
      });
    }
  });

  $scope.runBlast = function(p) {
    $rootScope.busyPromise=$http.post('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject.name+'/assemblies/'+$scope.blastSearch.assemblyId+'/run_blast', $scope.blastSearch).success(
      function(res) {
        $scope.gridOptions.data=res;
        $scope.blastSearch.lastResult=res;
        store.set('lastBlastSearch', $scope.blastSearch);
      })
      .error($rootScope.errHandler);
  }


  $scope.gridOptions={
    enableFiltering: true,
    showFooter: true,
    minRowsToShow: 50,
    multiSelect: false,
    onRegisterApi: function(gridApi) {
    },
    columnDefs: [
      { name: 'Hit', visible: true, field: 'source_sequence_id', width: '10%', filter: { condition: uiGridConstants.filter.CONTAINS }, aggregationType: uiGridConstants.aggregationTypes.count },
      { name: 'Transcript', visible: true, field: 'transcript.id', filter: { condition: uiGridConstants.filter.CONTAINS }, aggregationType: uiGridConstants.aggregationTypes.count, cellTemplate: '<div class="ui-grid-cell-contents"><a href="#/transcripts/{{row.entity.transcript.id}}"><reviewed-description ng-model="row.entity.transcript"></reviewed-description></a></div>' },
      { name: 'e-value', field: 'evalue', width: '8%', sort: { priority: 0, direction: uiGridConstants.ASC }, aggregationType: uiGridConstants.aggregationTypes.min, filter: { condition: uiGridConstants.filter.LESS_THAN } },
      { name: 'Match Length', field: 'length', width: '8%', sort: { priority: 1, direction: uiGridConstants.DESC }, filter: { condition: uiGridConstants.filter.GREATER_THAN }, aggregationType: uiGridConstants.aggregationTypes.max, cellTemplate: '<div class="ui-grid-cell-contents">{{COL_FIELD CUSTOM_FILTERS}} ({{(row.entity.length*3)/row.entity.qlen*100 |number:1}}%)</div>' },
      { name: 'Hit Length', field: 'slen', width: '8%', filter: { condition: uiGridConstants.filter.GREATER_THAN }, aggregationType: uiGridConstants.aggregationTypes.max },
      { name: 'positive %', field: 'ppos', aggregationType: uiGridConstants.aggregationTypes.max, width: '8%', filter: { condition: uiGridConstants.filter.GREATER_THAN }, },
      { name: 'identical %', field: 'pident', width: '8%', sort: { priority: 2, direction: uiGridConstants.DESC }, filter: { condition: uiGridConstants.filter.GREATER_THAN }, aggregationType: uiGridConstants.aggregationTypes.max },
    ],
    data: $scope.blastSearch.lastResult,
  };

}])
.controller('TranscriptsCtrl', ['$rootScope', '$scope', '$http', '$location', 'Assembly', function($rootScope, $scope, $http, $location) {
  if ($rootScope.transcripts==null) {
    $rootScope.transcripts={
      'pagingOptions': {
        'page': 1,
        'pagesize': 50,
      },
      'getFasta': function() {
        var search = $location.url().replace(/.+\?/, '');
        window.location.href='<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject.name+'/transcripts/fasta?'+search;
      },
      'sort': [
        { 'field': 'id', 'direction': 'asc' },
      ],
      'filters': {
      },
    };
  }
  $scope.gridOptions={
    minRowsToShow: 20,
    columnDefs: [
      { name: 'Transcript', field: 'id', cellTemplate: '<div class="ui-grid-cell-contents"><a href="#/transcripts/{{COL_FIELD}}">{{COL_FIELD CUSTOM_FILTERS}}</a></div>' },
      { name: 'Gene', field: 'gene.id', cellTemplate: '<div class="ui-grid-cell-contents"><a href="#/genes/{{COL_FIELD}}">{{COL_FIELD CUSTOM_FILTERS}}</a></div>' },
      { name: 'Name', field: 'name' },
      { name: 'Organism', field: 'organism.scientific_name' },
      { name: 'Best Homolog', field: 'best_homolog' },
    ],
  };

  $scope.refresh = function(p, callback) {
    $rootScope.busyPromise=$http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject.name+'/transcripts', { 'params': p }).success(
      function(res) {
        $rootScope.transcripts.pagingOptions.total_items = res.total_items;
        $scope.gridOptions.data = res.data;
        if (callback != null) callback(res);
      }
    ).error($rootScope.errHandler);
  }
}])
.controller('TranscriptsDetailCtrl', ['$rootScope', '$routeParams', '$scope', '$http', 'Transcript', 'Organism', function($rootScope, $routeParams, $scope, $http, Transcript, Organism) {
  $scope.newTag={tag:'', level:'info'};
  $scope.selectedDbs=[];
  $scope.selectedTags=[];
  $scope.organisms=Organism.prototype.getAll();
  $scope.$on('reload'+Organism.prototype.cacheName, function() {
    $scope.organisms=Organism.prototype.getAll();
  });
  $scope.blastGridOptions={
    enableFiltering: true,
    showFooter: true,
    minRowsToShow: 50,
    multiSelect: false,
    onRegisterApi: function(gridApi) {
    },
  };
  $scope.save = function() { $scope.transcript.save(); }
  $scope.mappings=[];
  $scope.refresh = function() {
    $scope.transcript = Transcript.get({id: $routeParams.id}, function(data) {
      $scope.transcript.prepare();
      $scope.transcript.loadMappings(function(d) {
        $scope.mappings=d;
      });
    }, $rootScope.errHandler);
  }
  $scope.refresh();
}])
.controller('GenesCtrl', ['$rootScope', '$scope', '$http', '$location', function($rootScope, $scope, $http, $location) {

  if ($rootScope.genes == null) {
    $rootScope.genes={
      'pagingOptions': {
        'page': 1,
        'pagesize': 20,
      },
      'getFasta': function() {
        var search = $location.url().replace(/.+\?/, '');
        window.location.href='<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject.name+'/genes/fasta?'+search;
      },
      /*
      'sort': [
        { 'field': 'id', 'direction': 'asc' },
      ],
      'filters': {
      },
      */
    };
  }
  $scope.gridOptions = {
    minRowsToShow: 20,
    columnDefs: [
     { name: 'Id', field: 'id', width: '8%', cellTemplate: '<div class="ui-grid-cell-contents"><a href="#/genes/{{COL_FIELD}}">{{COL_FIELD CUSTOM_FILTERS}}</a></div>', },
     { name: 'Rating', field: 'rating', width: '9%', cellTemplate: '<div class="ui-grid-cell-contents"><rating ng-model="MODEL_COL_FIELD" max="10" readonly="true" state-off="\'none\'"></rating></div>', },
     { name: 'Name', field: 'name', width: '40%', },
     { name: 'Organisms', field: 'organism', width: '13%', cellTemplate: '<div class="ui-grid-cell-contents"><organism-counts ng-model="MODEL_COL_FIELD"></organism-counts></div>',  },
     { name: 'Best Homolog', field: 'best_homolog', width: '15%' },
     { name: 'Reviewed', field: 'reviewed', width: '5%' },
     { name: 'Transcripts', field: 'transcripts.length', width: '5%', enableFiltering: false, enableSorting: false, },
    ],
  };
  $scope.refresh = function(p, callback) {
    $rootScope.busyPromise = $http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject.name+'/genes', { 'params': p }).success(
      function(res) {
        $rootScope.genes.pagingOptions.total_items = res.total_items;
        $scope.gridOptions.data = res.data;
        if (callback != null) callback(res);
      }
    ).error($scope.errHandler);
  }
}])
.controller('GenesDetailCtrl', ['$rootScope', '$routeParams', '$scope', '$http', 'uiGridConstants', '$timeout', 'Gene', function($rootScope, $routeParams, $scope, $http, uiGridConstants, $timeout, Gene) {
  $scope.selectedDbs=[];
  $scope.selectedTags=[];
  $scope.newTag={ tag: '', level: 'info' };
  $scope.blastGridOptions={
    enableFiltering: true,
    showFooter: true,
    minRowsToShow: 50,
    multiSelect: false,
    onRegisterApi: function(gridApi) {
      gridApi.selection.on.rowSelectionChanged($scope,function(row){
        $scope.gene.best_homolog=row.entity.source_sequence_id;
        $scope.gene.name=row.entity.stitle;
        $scope.gene.save();
      });
    },
  };
  $scope.deGridOptions={
    showFooter: true,
    rowsPerPage: 10,
    multiSelect: false,
    enableRowSelection: true,
    columnDefs: [
      { name: 'DE Run', field: 'de_run', cellTemplate: '<div class="ui-grid-cell-contents"><a href="#/deresults/{{MODEL_COL_FIELD.id}}/{{row.entity.contrast.id}}">{{MODEL_COL_FIELD.name}}</a></div>', },
      { name: 'Base Cond', field: 'contrast.base_condition.name', },
      { name: 'Contrast Cond', field: 'contrast.contrast_condition.name', },
      { name: 'Base Mean', field: 'base_mean', 
          aggregationType: uiGridConstants.aggregationTypes.avg },
      { name: 'p-value', field: 'pvalue', aggregationType: uiGridConstants.aggregationTypes.min },
      { name: 'Adjusted p-value', field: 'adjp', 
          aggregationType: uiGridConstants.aggregationTypes.min, 
      },
      { name: 'log2 Foldchange', field: 'log2_foldchange', 
          aggregationType: uiGridConstants.aggregationTypes.max,
          cellTemplate: '<div class="ui-grid-cell-contents"><pretty-foldchange ng-model="row.entity">{{COL_FIELD CUSTOM_FILTERS}}</pretty-foldchange></div>',
      },
    ],
  };

  $scope.transcriptMsaConfig = {
    options: {
      chart: { zoomType: 'x', },
      plotOptions: { },
      legend: { enabled: false, },
    },
    series: [],
    title: { text: '' },
    loading: false,
    xAxis: { },
    yAxis: [
      { min: 0, title: { text: 'Transcript' }, maxPadding: 0.05, endOnTick: false },
    ],
    size: { width: 1000, height: 250 },
    func: function(chart) {
      $scope.chart=chart;
    }
  };
  $scope.blockHeight=10;
  $scope.loadTranscriptMsa = function() {
    $scope.chart.showLoading();
    $http.get('<%= config->{base_uri} =%>/api/projects/'+$rootScope.currentProject.name+'/genes/'+$scope.gene.id+'/msa').success(function(d) {
      $scope.chart.hideLoading();
      $scope.transcriptMsaConfig.series=[];
      angular.forEach(d, function(trans, cnt) {
        var seriesItem = {
          name: trans.id,
          type: 'arearange',
          data: [],
          lineWidth: 2,
          fillOpacity: 0.5,
        };
        var bottom=$scope.blockHeight*cnt;
        var center=$scope.blockHeight*cnt+$scope.blockHeight/2;
        angular.forEach(trans.blocks, function(b, idx) {
          if (idx>0) {
            seriesItem.data.push([ trans.blocks[idx-1][1]+1, center, center ]);
            seriesItem.data.push([ b[0]-1, center, center ]);
          }
          seriesItem.data.push([ b[0], bottom+1, bottom+$scope.blockHeight-2 ]);
          seriesItem.data.push([ b[1], bottom+1, bottom+$scope.blockHeight-2 ]);
        });
        $scope.chart.yAxis[0].addPlotBand({
          id: 'band-'+trans.id,
          from: center,
          to: center,
          label: { text: trans.id, align: 'right' },
        });
        $scope.transcriptMsaConfig.series.push(seriesItem);

      });
      $scope.transcriptMSA=d;
    }).error($rootScope.errHandler);
  }

  $scope.save = function() { $scope.gene.save(); }
  $scope.mappings=[];
  $scope.refresh = function() {
    $scope.gene = Gene.get({id: $routeParams.id}, function(data) {
      $scope.gene.prepare();
      $scope.deGridOptions.data=$scope.gene.de_results;
      $scope.gene.loadMappings(function(d) {
        $scope.mappings=d;
      });
    }, $rootScope.errHandler);
  }
  $scope.refresh();

}])

